package com.reactiverates.api.rest.controller;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.reactiverates.domain.model.ConversionRequest;
import com.reactiverates.domain.model.ConversionResult;
import com.reactiverates.domain.model.ExchangeRate;
import com.reactiverates.domain.service.CurrencyConversionService;

import org.springframework.web.bind.annotation.RequestBody;
import jakarta.validation.Valid;
import reactor.core.publisher.Mono;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RequestParam;

import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.ExampleObject;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.responses.ApiResponses;
import io.swagger.v3.oas.annotations.tags.Tag;

@RestController
@RequestMapping("/api/v1")
@CrossOrigin(origins = "*")
@Tag(
    name = "üí± –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤–∞–ª—é—Ç",
    description = "–û–ø–µ—Ä–∞—Ü–∏–∏ –¥–ª—è –º–≥–Ω–æ–≤–µ–Ω–Ω–æ–π –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –∏ –ø–æ–ª—É—á–µ–Ω–∏—è –∫—É—Ä—Å–æ–≤ –≤–∞–ª—é—Ç."
)
public class CurrencyConversionController {
    private static final Logger log = LoggerFactory.getLogger(CurrencyConversionController.class);
    
    private final CurrencyConversionService service;

    public CurrencyConversionController(CurrencyConversionService service) {
        this.service = service;
    }

    @PostMapping("/convert")
    @Operation(
        summary = "üí± –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤–∞–ª—é—Ç—ã",
        description = "–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç —Å—É–º–º—É –∏–∑ –æ–¥–Ω–æ–π –≤–∞–ª—é—Ç—ã –≤ –¥—Ä—É–≥—É—é –ø–æ –∞–∫—Ç—É–∞–ª—å–Ω–æ–º—É –∫—É—Ä—Å—É."
    )
    @ApiResponses({
        @ApiResponse(
            responseCode = "200",
            description = "‚úÖ –£—Å–ø–µ—à–Ω–∞—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è",
            content = @Content(
                mediaType = "application/json",
                schema = @Schema(implementation = ConversionResult.class)
            )
        ),
        @ApiResponse(
            responseCode = "400",
            description = "‚ùå –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∑–∞–ø—Ä–æ—Å–∞"
        ),
        @ApiResponse(
            responseCode = "404",
            description = "üîç –í–∞–ª—é—Ç–Ω–∞—è –ø–∞—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
        )
    })
    public Mono<ResponseEntity<ConversionResult>> convertCurrency(
        @Parameter(description = "–ò—Å—Ö–æ–¥–Ω–∞—è –≤–∞–ª—é—Ç–∞ (3 –±—É–∫–≤—ã, ISO)", example = "USD", required = true)
        @Valid @RequestBody ConversionRequest request
    ) {
        log.info("Converting {} {} to {}", request.amount(), request.fromCurrency(), request.toCurrency());

        return service.convertCurrency(request)
            .map(result -> {
                log.info("Conversion successful: {} {} = {} {}", 
                    request.amount(), request.fromCurrency(), result.convertedAmount(), request.toCurrency());
                return ResponseEntity.ok(result);
            })
            .doOnError(error -> log.error("Conversion failed for {}: {}", request, error.getMessage()));
    }

    @GetMapping("/rates")
    @Operation(
        summary = "üìà –ü–æ–ª—É—á–∏—Ç—å –∫—É—Ä—Å –æ–±–º–µ–Ω–∞",
        description = "–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—É—â–∏–π –∫—É—Ä—Å –æ–±–º–µ–Ω–∞ –º–µ–∂–¥—É –¥–≤—É–º—è –≤–∞–ª—é—Ç–∞–º–∏"
    )
    @ApiResponses({
        @ApiResponse(
            responseCode = "200",
            description = "‚úÖ –ö—É—Ä—Å –ø–æ–ª—É—á–µ–Ω —É—Å–ø–µ—à–Ω–æ",
            content = @Content(
                mediaType = "application/json",
                schema = @Schema(implementation = ExchangeRate.class)
            )
        ),
        @ApiResponse(
            responseCode = "404",
            description = "üîç –í–∞–ª—é—Ç–Ω–∞—è –ø–∞—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
        )
    })
    public Mono<ResponseEntity<ExchangeRate>> getExchangeRate(
        @Parameter(description = "–ò—Å—Ö–æ–¥–Ω–∞—è –≤–∞–ª—é—Ç–∞ (3 –±—É–∫–≤—ã, ISO)", example = "USD", required = true)
        @RequestParam("from") String fromCurrency,
        @Parameter(description = "–¶–µ–ª–µ–≤–∞—è –≤–∞–ª—é—Ç–∞ (3 –±—É–∫–≤—ã, ISO)", example = "EUR", required = true)
        @RequestParam("to") String toCurrency
    ) {
        log.info("Getting exchange rate: {} -> {}", fromCurrency, toCurrency);

        return service.getExchangeRate(fromCurrency, toCurrency)
            .map(rate -> {
                log.info("Exchange rate retrieved: {} -> {} = {}", fromCurrency, toCurrency, rate.rate());
                return ResponseEntity.ok(rate);
            })
            .doOnError(error -> log.error("Failed to get rate {} -> {}: {}", 
                fromCurrency, toCurrency, error.getMessage()));
    }
    
    @GetMapping("/rates/support")
    @Operation(
        summary = "üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –≤–∞–ª—é—Ç–Ω–æ–π –ø–∞—Ä—ã",
        description = "–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –ª–∏ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –º–µ–∂–¥—É —É–∫–∞–∑–∞–Ω–Ω—ã–º–∏ –≤–∞–ª—é—Ç–∞–º–∏."
    )
    @ApiResponses({
        @ApiResponse(
            responseCode = "200",
            description = "‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞",
            content = @Content(
                mediaType = "application/json",
                schema = @Schema(implementation = SupportResponse.class)
            )
        )
    })
    public Mono<ResponseEntity<SupportResponse>> checkCurrencySupport(
        @Parameter(description = "–ò—Å—Ö–æ–¥–Ω–∞—è –≤–∞–ª—é—Ç–∞ (3 –±—É–∫–≤—ã, ISO)", example = "USD", required = true)
        @RequestParam String fromCurrency,
        @Parameter(description = "–¶–µ–ª–µ–≤–∞—è –≤–∞–ª—é—Ç–∞ (3 –±—É–∫–≤—ã, ISO)", example = "EUR", required = true)
        @RequestParam String toCurrency
    ) {
        log.debug("Checking currency pair support: {} -> {}", fromCurrency, toCurrency);
        
        return service.isCurrencyPairSupported(fromCurrency, toCurrency)
            .map(supported -> ResponseEntity.ok(new SupportResponse(supported)))
            .doOnNext(response -> log.debug("Currency pair {} -> {} supported: {}", 
                fromCurrency, toCurrency, response.getBody().supported()));
    }
    
    @Schema(description = "–û—Ç–≤–µ—Ç –æ –ø–æ–¥–¥–µ—Ä–∂–∫–µ –≤–∞–ª—é—Ç–Ω–æ–π –ø–∞—Ä—ã.")
    public record SupportResponse(
        @Schema(description = "–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –ª–∏ –¥–∞–Ω–Ω–∞—è –≤–∞–ª—é—Ç–Ω–∞—è –ø–∞—Ä–∞", example = "true")
        boolean supported
    ) {}
}

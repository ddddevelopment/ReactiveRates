package com.reactiverates.api.rest.controller;

import com.reactiverates.domain.model.HistoricalExchangeRate;
import com.reactiverates.domain.service.HistoricalRatesService;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.responses.ApiResponses;
import io.swagger.v3.oas.annotations.tags.Tag;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.format.annotation.DateTimeFormat;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

import java.time.LocalDate;

@RestController
@RequestMapping("/api/v1/historical")
@CrossOrigin(origins = "*")
@Tag(
    name = "üìà –ò—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –∫—É—Ä—Å—ã –≤–∞–ª—é—Ç",
    description = "–û–ø–µ—Ä–∞—Ü–∏–∏ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏ –∞–Ω–∞–ª–∏–∑–∞ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –∫—É—Ä—Å–æ–≤ –≤–∞–ª—é—Ç"
)
public class HistoricalRatesController {
    private static final Logger log = LoggerFactory.getLogger(HistoricalRatesController.class);
    private final HistoricalRatesService service;

    public HistoricalRatesController(HistoricalRatesService service) {
        this.service = service;
    }

    @GetMapping
    @Operation(
        summary = "üìÖ –ü–æ–ª—É—á–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –∫—É—Ä—Å—ã",
        description = "–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –∫—É—Ä—Å—ã –æ–±–º–µ–Ω–∞ –º–µ–∂–¥—É –¥–≤—É–º—è –≤–∞–ª—é—Ç–∞–º–∏ –∑–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥ (–≤–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ)"
    )
    @ApiResponses({
        @ApiResponse(
            responseCode = "200",
            description = "‚úÖ –ö—É—Ä—Å—ã –ø–æ–ª—É—á–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ",
            content = @Content(
                mediaType = "application/json",
                schema = @Schema(implementation = HistoricalExchangeRate.class)
            )
        ),
        @ApiResponse(
            responseCode = "400",
            description = "‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞"
        )
    })
    public Flux<HistoricalExchangeRate> getHistoricalRates(
        @Parameter(description = "–ò—Å—Ö–æ–¥–Ω–∞—è –≤–∞–ª—é—Ç–∞ (3-—Ö –±—É–∫–≤–µ–Ω–Ω—ã–π –∫–æ–¥ ISO)", example = "USD", required = true)
        @RequestParam String from,
        @Parameter(description = "–¶–µ–ª–µ–≤–∞—è –≤–∞–ª—é—Ç–∞ (3-—Ö –±—É–∫–≤–µ–Ω–Ω—ã–π –∫–æ–¥ ISO)", example = "EUR", required = true)
        @RequestParam String to,
        @Parameter(description = "–ù–∞—á–∞–ª—å–Ω–∞—è –¥–∞—Ç–∞ –ø–µ—Ä–∏–æ–¥–∞ (–≤ —Ñ–æ—Ä–º–∞—Ç–µ YYYY-MM-DD)", example = "2024-01-01", required = true)
        @RequestParam @DateTimeFormat(iso = DateTimeFormat.ISO.DATE) LocalDate startDate,
        @Parameter(description = "–ö–æ–Ω–µ—á–Ω–∞—è –¥–∞—Ç–∞ –ø–µ—Ä–∏–æ–¥–∞ (–≤ —Ñ–æ—Ä–º–∞—Ç–µ YYYY-MM-DD)", example = "2024-01-31", required = true)
        @RequestParam @DateTimeFormat(iso = DateTimeFormat.ISO.DATE) LocalDate endDate
    ) {
        log.info("[HIST] –ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –∫—É—Ä—Å–æ–≤: {} -> {}, {} - {}", from, to, startDate, endDate);
        return service.getHistoricalRates(from, to, startDate, endDate)
            .doOnError(e -> log.error("[HIST] –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –∫—É—Ä—Å–æ–≤: {}", e.getMessage()));
    }

    @GetMapping("/count")
    @Operation(
        summary = "üî¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –∑–∞–ø–∏—Å–µ–π",
        description = "–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –∑–∞–ø–∏—Å–µ–π –¥–ª—è –≤–∞–ª—é—Ç–Ω–æ–π –ø–∞—Ä—ã"
    )
    @ApiResponses({
        @ApiResponse(
            responseCode = "200",
            description = "‚úÖ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—É—á–µ–Ω–æ",
            content = @Content(
                mediaType = "application/json",
                schema = @Schema(implementation = Long.class)
            )
        )
    })
    public Mono<ResponseEntity<Long>> getHistoricalDataCount(
        @Parameter(description = "–ò—Å—Ö–æ–¥–Ω–∞—è –≤–∞–ª—é—Ç–∞", example = "USD", required = true)
        @RequestParam String from,
        @Parameter(description = "–¶–µ–ª–µ–≤–∞—è –≤–∞–ª—é—Ç–∞", example = "EUR", required = true)
        @RequestParam String to
    ) {
        log.info("[HIST] –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –∑–∞–ø–∏—Å–µ–π: {} -> {}", from, to);
        return service.getHistoricalDataCount(from, to)
            .map(ResponseEntity::ok)
            .doOnError(e -> log.error("[HIST] –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞: {}", e.getMessage()));
    }

    @GetMapping("/complete")
    @Operation(
        summary = "‚úÖ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–ª–Ω–æ—Ç—É –¥–∞–Ω–Ω—ã—Ö –∑–∞ –ø–µ—Ä–∏–æ–¥",
        description = "–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –µ—Å—Ç—å –ª–∏ –≤ –±–∞–∑–µ –≤—Å–µ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –∫—É—Ä—Å—ã –∑–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥"
    )
    @ApiResponses({
        @ApiResponse(
            responseCode = "200",
            description = "‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞",
            content = @Content(
                mediaType = "application/json",
                schema = @Schema(implementation = DataCompleteResponse.class)
            )
        )
    })
    public Mono<ResponseEntity<DataCompleteResponse>> isDataCompleteForPeriod(
        @Parameter(description = "–ò—Å—Ö–æ–¥–Ω–∞—è –≤–∞–ª—é—Ç–∞", example = "USD", required = true)
        @RequestParam String from,
        @Parameter(description = "–¶–µ–ª–µ–≤–∞—è –≤–∞–ª—é—Ç–∞", example = "EUR", required = true)
        @RequestParam String to,
        @Parameter(description = "–ù–∞—á–∞–ª—å–Ω–∞—è –¥–∞—Ç–∞ –ø–µ—Ä–∏–æ–¥–∞", example = "2024-01-01", required = true)
        @RequestParam @DateTimeFormat(iso = DateTimeFormat.ISO.DATE) LocalDate startDate,
        @Parameter(description = "–ö–æ–Ω–µ—á–Ω–∞—è –¥–∞—Ç–∞ –ø–µ—Ä–∏–æ–¥–∞", example = "2024-01-31", required = true)
        @RequestParam @DateTimeFormat(iso = DateTimeFormat.ISO.DATE) LocalDate endDate
    ) {
        log.info("[HIST] –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª–Ω–æ—Ç—ã –¥–∞–Ω–Ω—ã—Ö: {} -> {}, {} - {}", from, to, startDate, endDate);
        return service.isDataCompleteForPeriod(from, to, startDate, endDate)
            .map(DataCompleteResponse::new)
            .map(ResponseEntity::ok)
            .doOnError(e -> log.error("[HIST] –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–ª–Ω–æ—Ç—ã: {}", e.getMessage()));
    }

    @GetMapping("/range")
    @Operation(
        summary = "üìÜ –î–∏–∞–ø–∞–∑–æ–Ω –¥–∞—Ç —Å –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏",
        description = "–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–∏–∞–ø–∞–∑–æ–Ω –¥–∞—Ç, –∑–∞ –∫–æ—Ç–æ—Ä—ã–µ –µ—Å—Ç—å –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –∫—É—Ä—Å—ã –¥–ª—è –≤–∞–ª—é—Ç–Ω–æ–π –ø–∞—Ä—ã"
    )
    @ApiResponses({
        @ApiResponse(
            responseCode = "200",
            description = "‚úÖ –î–∏–∞–ø–∞–∑–æ–Ω –ø–æ–ª—É—á–µ–Ω",
            content = @Content(
                mediaType = "application/json",
                schema = @Schema(implementation = DateRangeResponse.class)
            )
        )
    })
    public Mono<ResponseEntity<DateRangeResponse>> getDataDateRange(
        @Parameter(description = "–ò—Å—Ö–æ–¥–Ω–∞—è –≤–∞–ª—é—Ç–∞", example = "USD", required = true)
        @RequestParam String from,
        @Parameter(description = "–¶–µ–ª–µ–≤–∞—è –≤–∞–ª—é—Ç–∞", example = "EUR", required = true)
        @RequestParam String to
    ) {
        log.info("[HIST] –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ –¥–∞—Ç: {} -> {}", from, to);
        return service.getDataDateRange(from, to)
            .map(dates -> new DateRangeResponse(dates.length == 2 ? dates[0] : null, dates.length == 2 ? dates[1] : null))
            .map(ResponseEntity::ok)
            .doOnError(e -> log.error("[HIST] –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∏–∞–ø–∞–∑–æ–Ω–∞ –¥–∞—Ç: {}", e.getMessage()));
    }

    @Schema(description = "–û—Ç–≤–µ—Ç –æ –ø–æ–ª–Ω–æ—Ç–µ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö –∑–∞ –ø–µ—Ä–∏–æ–¥")
    public record DataCompleteResponse(
        @Schema(description = "–ü–æ–ª–Ω—ã –ª–∏ –¥–∞–Ω–Ω—ã–µ –∑–∞ –ø–µ—Ä–∏–æ–¥", example = "true")
        boolean complete
    ) {}

    @Schema(description = "–û—Ç–≤–µ—Ç —Å –¥–∏–∞–ø–∞–∑–æ–Ω–æ–º –¥–∞—Ç –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö")
    public record DateRangeResponse(
        @Schema(description = "–°–∞–º–∞—è —Ä–∞–Ω–Ω—è—è –¥–∞—Ç–∞", example = "2024-01-01")
        LocalDate start,
        @Schema(description = "–°–∞–º–∞—è –ø–æ–∑–¥–Ω—è—è –¥–∞—Ç–∞", example = "2024-12-31")
        LocalDate end
    ) {}
} 
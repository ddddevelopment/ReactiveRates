package com.reactiverates.api.rest.controller;

import com.reactiverates.domain.model.HistoricalExchangeRate;
import com.reactiverates.domain.service.HistoricalRateService;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.responses.ApiResponses;
import io.swagger.v3.oas.annotations.tags.Tag;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.format.annotation.DateTimeFormat;
import org.springframework.web.bind.annotation.*;
import reactor.core.publisher.Flux;

import java.time.LocalDate;

@RestController
@RequestMapping("/api/v1/historical")
@CrossOrigin(origins = "*")
@Tag(
    name = "üìä –ò—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –∫—É—Ä—Å—ã –≤–∞–ª—é—Ç",
    description = "–û–ø–µ—Ä–∞—Ü–∏–∏ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏ –∞–Ω–∞–ª–∏–∑–∞ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –∫—É—Ä—Å–æ–≤ –≤–∞–ª—é—Ç."
)
public class HistoricalRatesController {
    private static final Logger log = LoggerFactory.getLogger(HistoricalRatesController.class);
    private final HistoricalRateService service;

    public HistoricalRatesController(HistoricalRateService service) {
        this.service = service;
    }

    @GetMapping
    @Operation(
        summary = "üìÖ –ò—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –∫—É—Ä—Å—ã –∑–∞ –ø–µ—Ä–∏–æ–¥",
        description = "–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –∫—É—Ä—Å—ã –æ–±–º–µ–Ω–∞ –º–µ–∂–¥—É –¥–≤—É–º—è –≤–∞–ª—é—Ç–∞–º–∏ –∑–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥ (–≤–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ)."
    )
    @ApiResponses({
        @ApiResponse(
            responseCode = "200",
            description = "‚úÖ –ö—É—Ä—Å—ã –ø–æ–ª—É—á–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ",
            content = @Content(
                mediaType = "application/json",
                schema = @Schema(implementation = HistoricalExchangeRate.class)
            )
        ),
        @ApiResponse(
            responseCode = "400",
            description = "‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞"
        )
    })
    public Flux<HistoricalExchangeRate> getHistoricalRates(
        @Parameter(description = "–ò—Å—Ö–æ–¥–Ω–∞—è –≤–∞–ª—é—Ç–∞ (3 –±—É–∫–≤—ã, ISO)", example = "USD", required = true)
        @RequestParam String from,
        @Parameter(description = "–¶–µ–ª–µ–≤–∞—è –≤–∞–ª—é—Ç–∞ (3 –±—É–∫–≤—ã, ISO)", example = "EUR", required = true)
        @RequestParam String to,
        @Parameter(description = "–ù–∞—á–∞–ª—å–Ω–∞—è –¥–∞—Ç–∞ –ø–µ—Ä–∏–æ–¥–∞ (–ì–ì–ì–ì-–ú–ú-–î–î)", example = "2024-01-01", required = true)
        @RequestParam @DateTimeFormat(iso = DateTimeFormat.ISO.DATE) LocalDate startDate,
        @Parameter(description = "–ö–æ–Ω–µ—á–Ω–∞—è –¥–∞—Ç–∞ –ø–µ—Ä–∏–æ–¥–∞ (–ì–ì–ì–ì-–ú–ú-–î–î)", example = "2024-01-31", required = true)
        @RequestParam @DateTimeFormat(iso = DateTimeFormat.ISO.DATE) LocalDate endDate
    ) {
        log.info("[HIST] Fetching historical rates: {} -> {}, {} - {}", from, to, startDate, endDate);
        return service.getHistoricalRates(from, to, startDate, endDate)
            .doOnError(e -> log.error("[HIST] Error fetching historical rates: {}", e.getMessage()))
            .doOnComplete(() -> log.info("[HIST] Completed fetching historical rates: {} -> {}, {} - {}", from, to, startDate, endDate))
            .doOnSubscribe(sub -> log.info("[HIST] Subscribed to historical rates stream: {} -> {}, {} - {}", from, to, startDate, endDate))
            .collectList()
            .flatMapMany(list -> {
                if (list.isEmpty()) {
                    log.warn("[HIST] No historical rates found for {} -> {}, {} - {}", from, to, startDate, endDate);
                } else {
                    log.info("[HIST] Returned {} historical rates for {} -> {}, {} - {}", list.size(), from, to, startDate, endDate);
                }
                return Flux.fromIterable(list);
            });
    }
} 